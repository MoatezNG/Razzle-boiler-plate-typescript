{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { apiCall } from 'client/actions/counterAction';\nconst initialState = {\n  count: 0,\n  loading: false\n};\nexport const countSlice = createSlice({\n  name: 'count',\n  initialState,\n  reducers: {\n    incrementAction: state => {\n      state.count += 1;\n    }\n  },\n  extraReducers: {\n    [apiCall.pending.type]: state => {\n      state.loading = true;\n    },\n    [apiCall.fulfilled.type]: (state, {\n      payload\n    }) => {\n      const {\n        count\n      } = payload;\n      state.count = count;\n    },\n    [apiCall.rejected.type]: state => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  incrementAction\n} = countSlice.actions;\nexport default countSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/src/client/_redux/reducers/counterReducer.ts"],"names":["createSlice","apiCall","initialState","count","loading","countSlice","name","reducers","incrementAction","state","extraReducers","pending","type","fulfilled","payload","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,8BAAxB;AAOA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,CADwB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAjC;AAIA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;AACpCM,EAAAA,IAAI,EAAE,OAD8B;AAEpCJ,EAAAA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAGC,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACN,KAAN,IAAe,CAAf;AACD;AAHO,GAH0B;AAQpCO,EAAAA,aAAa,EAAE;AACb,KAACT,OAAO,CAACU,OAAR,CAAgBC,IAAjB,GAAyBH,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,KAACH,OAAO,CAACY,SAAR,CAAkBD,IAAnB,GAA0B,CAACH,KAAD,EAAQ;AAAEK,MAAAA;AAAF,KAAR,KAA6B;AACrD,YAAM;AAAEX,QAAAA;AAAF,UAAYW,OAAlB;AACAL,MAAAA,KAAK,CAACN,KAAN,GAAcA,KAAd;AACD,KAPY;AAQb,KAACF,OAAO,CAACc,QAAR,CAAiBH,IAAlB,GAA0BH,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD;AAVY;AARqB,CAAD,CAA9B;AAsBP,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAsBH,UAAU,CAACW,OAAvC;AACP,eAAeX,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { apiCall } from 'client/actions/counterAction';\n\nexport type countState = {\n  count: number;\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  count: 0,\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'count',\n  initialState,\n  reducers: {\n    incrementAction: (state) => {\n      state.count += 1;\n    },\n  },\n  extraReducers: {\n    [apiCall.pending.type]: (state) => {\n      state.loading = true;\n    },\n    [apiCall.fulfilled.type]: (state, { payload }: any) => {\n      const { count } = payload;\n      state.count = count;\n    },\n    [apiCall.rejected.type]: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { incrementAction } = countSlice.actions;\nexport default countSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}