{"ast":null,"code":"import _defineProperty from \"C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _extraReducers;\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { apiCall } from 'client/actions/apiCallExample';\nvar initialState = {\n  count: 0,\n  loading: false\n};\nexport var countSlice = createSlice({\n  name: 'count',\n  initialState: initialState,\n  reducers: {\n    incrementAction: function incrementAction(state) {\n      state.count += 1;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, apiCall.pending.type, function (state) {\n    state.loading = true;\n  }), _defineProperty(_extraReducers, apiCall.fulfilled.type, function (state, _ref) {\n    var payload = _ref.payload;\n    var count = payload.count;\n    state.count = count;\n  }), _defineProperty(_extraReducers, apiCall.rejected.type, function (state) {\n    state.loading = false;\n  }), _extraReducers)\n});\nvar incrementAction = countSlice.actions.incrementAction;\nexport { incrementAction };\nexport default countSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/src/client/_redux/reducers/counterReducer.ts"],"names":["createSlice","apiCall","initialState","count","loading","countSlice","name","reducers","incrementAction","state","extraReducers","pending","type","fulfilled","payload","rejected","actions","reducer"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,+BAAxB;AAOA,IAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,CADwB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAjC;AAIA,OAAO,IAAMC,UAAU,GAAGL,WAAW,CAAC;AACpCM,EAAAA,IAAI,EAAE,OAD8B;AAEpCJ,EAAAA,YAAY,EAAZA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,yBAACC,KAAD,EAAW;AAC1BA,MAAAA,KAAK,CAACN,KAAN,IAAe,CAAf;AACD;AAHO,GAH0B;AAQpCO,EAAAA,aAAa,wDACVT,OAAO,CAACU,OAAR,CAAgBC,IADN,EACa,UAACH,KAAD,EAAW;AACjCA,IAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,GAHU,mCAKVH,OAAO,CAACY,SAAR,CAAkBD,IALR,EAKe,UAACH,KAAD,QAA6B;AAAA,QAAnBK,OAAmB,QAAnBA,OAAmB;AACrD,QAAQX,KAAR,GAAkBW,OAAlB,CAAQX,KAAR;AACAM,IAAAA,KAAK,CAACN,KAAN,GAAcA,KAAd;AACD,GARU,mCASVF,OAAO,CAACc,QAAR,CAAiBH,IATP,EASc,UAACH,KAAD,EAAW;AAClCA,IAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,GAXU;AARuB,CAAD,CAA9B;AAuBA,IAAQI,eAAR,GAA4BH,UAAU,CAACW,OAAvC,CAAQR,eAAR;;AACP,eAAeH,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { apiCall } from 'client/actions/apiCallExample';\n\nexport type countState = {\n  count: number;\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  count: 0,\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'count',\n  initialState,\n  reducers: {\n    incrementAction: (state) => {\n      state.count += 1;\n    },\n  },\n  extraReducers: {\n    [apiCall.pending.type]: (state) => {\n      state.loading = true;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [apiCall.fulfilled.type]: (state, { payload }: any) => {\n      const { count } = payload;\n      state.count = count;\n    },\n    [apiCall.rejected.type]: (state) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { incrementAction } = countSlice.actions;\nexport default countSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}