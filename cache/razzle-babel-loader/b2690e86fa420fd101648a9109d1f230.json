{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { countCalc } from 'client/actions/counterAction';\nconst initialState = {\n  count: 0,\n  loading: false\n};\nexport const countSlice = createSlice({\n  name: 'count',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [countCalc.pending.type]: state => {\n      // eslint-disable-next-line no-param-reassign\n      state.loading = true;\n    },\n    [countCalc.fulfilled.type]: (state, {\n      payload\n    }) => {\n      const {\n        count\n      } = payload; // eslint-disable-next-line no-param-reassign\n\n      state.count = count;\n    },\n    [countCalc.rejected.type]: state => {\n      // eslint-disable-next-line no-param-reassign\n      state.loading = false;\n    }\n  }\n});\nexport default countSlice.reducer;","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/src/client/_redux/reducers/counterReducer.ts"],"names":["createSlice","countCalc","initialState","count","loading","countSlice","name","reducers","extraReducers","pending","type","state","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AAOA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,CADwB;AAE/BC,EAAAA,OAAO,EAAE;AAFsB,CAAjC;AAIA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;AACpCM,EAAAA,IAAI,EAAE,OAD8B;AAEpCJ,EAAAA,YAFoC;AAGpCK,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,aAAa,EAAE;AACb,KAACP,SAAS,CAACQ,OAAV,CAAkBC,IAAnB,GAA2BC,KAAD,IAAW;AACnC;AACAA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAJY;AAKb,KAACH,SAAS,CAACW,SAAV,CAAoBF,IAArB,GAA4B,CAACC,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAA6B;AACvD,YAAM;AAAEV,QAAAA;AAAF,UAAYU,OAAlB,CADuD,CAGvD;;AACAF,MAAAA,KAAK,CAACR,KAAN,GAAcA,KAAd;AACD,KAVY;AAYb,KAACF,SAAS,CAACa,QAAV,CAAmBJ,IAApB,GAA4BC,KAAD,IAAW;AACpC;AACAA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD;AAfY;AAJqB,CAAD,CAA9B;AAuBP,eAAeC,UAAU,CAACU,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { countCalc } from 'client/actions/counterAction';\n\nexport type countState = {\n  count: number;\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  count: 0,\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'count',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [countCalc.pending.type]: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.loading = true;\n    },\n    [countCalc.fulfilled.type]: (state, { payload }: any) => {\n      const { count } = payload;\n\n      // eslint-disable-next-line no-param-reassign\n      state.count = count;\n    },\n\n    [countCalc.rejected.type]: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.loading = false;\n    },\n  },\n});\n\nexport default countSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}