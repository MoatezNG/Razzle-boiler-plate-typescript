{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/node_modules/@babel/runtime/regenerator\";\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nexport var countCalc = createAsyncThunk('count/increment', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n    var count, rejectWithValue;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            count = _ref.count;\n            rejectWithValue = _ref2.rejectWithValue;\n            _context.prev = 2;\n            return _context.abrupt(\"return\", count + 1);\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", rejectWithValue(_context.t0.message));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 6]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());","map":{"version":3,"sources":["C:/Users/moate/OneDrive/Desktop/Tests/Razzle-boiler-plate-typescript/src/client/actions/counterAction.ts"],"names":["createAsyncThunk","countCalc","count","rejectWithValue","message"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAEA,OAAO,IAAMC,SAAS,GAAGD,gBAAgB,CACvC,iBADuC;AAAA,uEAEvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASE,YAAAA,KAAT,QAASA,KAAT;AAAyBC,YAAAA,eAAzB,SAAyBA,eAAzB;AAAA;AAAA,6CAEWD,KAAK,GAAG,CAFnB;;AAAA;AAAA;AAAA;AAAA,6CAIWC,eAAe,CAAC,YAAMC,OAAP,CAJ1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFuC;;AAAA;AAAA;AAAA;AAAA,IAAlC","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const countCalc = createAsyncThunk(\n  'count/increment',\n  async ({ count }: any, { rejectWithValue }) => {\n    try {\n      return count + 1;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}