{"version":3,"file":"server.f6644179bec936f42a18.hot-update.js","sources":["webpack:///./src/client/_redux/app/store.ts","webpack:///./src/client/_redux/reducers/counterReducer.ts","webpack:///./src/client/actions/counterAction.ts","webpack:///./src/client/pages/Home.tsx","webpack:///external \"@reduxjs/toolkit\"","webpack:///external \"react-redux\""],"sourcesContent":["import { combineReducers, configureStore, MiddlewareArray } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport counterReducer from '../reducers/counterReducer';\n\nconst rootReducer = combineReducers({\n  counterReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n});\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport default store;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { countCalc } from 'client/actions/counterAction';\n\nexport type countState = {\n  count: number;\n  loading: boolean;\n};\n\nconst initialState: countState = {\n  count: 0,\n  loading: false,\n};\nexport const countSlice = createSlice({\n  name: 'count',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [countCalc.pending.type]: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.loading = true;\n    },\n    [countCalc.fulfilled.type]: (state, { payload }: any) => {\n      const { count } = payload;\n\n      // eslint-disable-next-line no-param-reassign\n      state.count = count;\n    },\n\n    [countCalc.rejected.type]: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.loading = false;\n    },\n  },\n});\n\nexport default countSlice.reducer;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const countCalc = createAsyncThunk(\n  'count/increment',\n  async ({ count }: any, { rejectWithValue }) => {\n    try {\n      return count + 1;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n","import { countCalc } from 'client/actions/counterAction';\nimport { RootState, useAppDispatch } from 'client/_redux/app/store';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst Home: React.FC = () => {\n  const { count } = useSelector((state: RootState) => state.counterReducer);\n  const dispatch = useAppDispatch();\n  return (\n    <div className=\"App\">\n      <h1> The count is: {count}</h1>\n      <button onClick={() => dispatch(countCalc())}>Display Even Numbers</button>\n    </div>\n  );\n};\n\nexport default Home;\n","module.exports = require(\"@reduxjs/toolkit\");","module.exports = require(\"react-redux\");"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAOA;AACA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAfA;AAJA;AAuBA;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;AChBA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}